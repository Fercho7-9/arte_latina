{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(fb, userService) {\n    this.fb = fb;\n    this.userService = userService;\n    this.successMessage = null;\n    this.errorMessage = null;\n    this.registerForm = this.fb.group({\n      name: ['', [Validators.required]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', [Validators.required]],\n      nacionalidad: ['', [Validators.required]],\n      rol: ['artista', [Validators.required]] // Valor predeterminado 'artista'\n    }, {\n      validator: this.passwordMatchValidator\n    });\n  }\n  passwordMatchValidator(formGroup) {\n    const password = formGroup.get('password')?.value;\n    const confirmPassword = formGroup.get('confirmPassword')?.value;\n    return password === confirmPassword ? null : {\n      mismatch: true\n    };\n  }\n  onSubmit() {\n    if (this.registerForm.valid) {\n      const formData = this.registerForm.value;\n      // Usar el servicio para registrar al usuario\n      this.userService.register(formData).subscribe(response => {\n        this.successMessage = 'Usuario registrado con éxito.';\n        this.errorMessage = null;\n        this.registerForm.reset(); // Limpiar el formulario\n      }, error => {\n        this.successMessage = null;\n        this.errorMessage = 'Error al registrar el usuario: ' + error.message;\n      });\n    } else {\n      this.errorMessage = 'Por favor, completa el formulario correctamente.';\n    }\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"names":["Component","Validators","RegisterComponent","constructor","fb","userService","successMessage","errorMessage","registerForm","group","name","required","email","password","minLength","confirmPassword","nacionalidad","rol","validator","passwordMatchValidator","formGroup","get","value","mismatch","onSubmit","valid","formData","register","subscribe","response","reset","error","message","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Fernando\\Desktop\\arte_latino\\arte_latino\\src\\app\\components\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { UserService } from './';  // Asegúrate de importar el servicio\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css'],\r\n})\r\nexport class RegisterComponent {\r\n  registerForm: FormGroup;\r\n  successMessage: string | null = null;\r\n  errorMessage: string | null = null;\r\n\r\n  constructor(private fb: FormBuilder, private userService: UserService) {\r\n    this.registerForm = this.fb.group(\r\n      {\r\n        name: ['', [Validators.required]],\r\n        email: ['', [Validators.required, Validators.email]],\r\n        password: ['', [Validators.required, Validators.minLength(6)]],\r\n        confirmPassword: ['', [Validators.required]],\r\n        nacionalidad: ['', [Validators.required]],\r\n        rol: ['artista', [Validators.required]], // Valor predeterminado 'artista'\r\n      },\r\n      { validator: this.passwordMatchValidator }\r\n    );\r\n  }\r\n\r\n  passwordMatchValidator(formGroup: FormGroup) {\r\n    const password = formGroup.get('password')?.value;\r\n    const confirmPassword = formGroup.get('confirmPassword')?.value;\r\n    return password === confirmPassword ? null : { mismatch: true };\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.registerForm.valid) {\r\n      const formData = this.registerForm.value;\r\n\r\n      // Usar el servicio para registrar al usuario\r\n      this.userService.register(formData).subscribe(\r\n        (response) => {\r\n          this.successMessage = 'Usuario registrado con éxito.';\r\n          this.errorMessage = null;\r\n          this.registerForm.reset(); // Limpiar el formulario\r\n        },\r\n        (error) => {\r\n          this.successMessage = null;\r\n          this.errorMessage = 'Error al registrar el usuario: ' + error.message;\r\n        }\r\n      );\r\n    } else {\r\n      this.errorMessage = 'Por favor, completa el formulario correctamente.';\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAQ5D,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAK5BC,YAAoBC,EAAe,EAAUC,WAAwB;IAAjD,KAAAD,EAAE,GAAFA,EAAE;IAAuB,KAAAC,WAAW,GAAXA,WAAW;IAHxD,KAAAC,cAAc,GAAkB,IAAI;IACpC,KAAAC,YAAY,GAAkB,IAAI;IAGhC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAC/B;MACEC,IAAI,EAAE,CAAC,EAAE,EAAE,CAACT,UAAU,CAACU,QAAQ,CAAC,CAAC;MACjCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACW,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DC,eAAe,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACU,QAAQ,CAAC,CAAC;MAC5CK,YAAY,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACU,QAAQ,CAAC,CAAC;MACzCM,GAAG,EAAE,CAAC,SAAS,EAAE,CAAChB,UAAU,CAACU,QAAQ,CAAC,CAAC,CAAE;KAC1C,EACD;MAAEO,SAAS,EAAE,IAAI,CAACC;IAAsB,CAAE,CAC3C;EACH;EAEAA,sBAAsBA,CAACC,SAAoB;IACzC,MAAMP,QAAQ,GAAGO,SAAS,CAACC,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;IACjD,MAAMP,eAAe,GAAGK,SAAS,CAACC,GAAG,CAAC,iBAAiB,CAAC,EAAEC,KAAK;IAC/D,OAAOT,QAAQ,KAAKE,eAAe,GAAG,IAAI,GAAG;MAAEQ,QAAQ,EAAE;IAAI,CAAE;EACjE;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAAChB,YAAY,CAACiB,KAAK,EAAE;MAC3B,MAAMC,QAAQ,GAAG,IAAI,CAAClB,YAAY,CAACc,KAAK;MAExC;MACA,IAAI,CAACjB,WAAW,CAACsB,QAAQ,CAACD,QAAQ,CAAC,CAACE,SAAS,CAC1CC,QAAQ,IAAI;QACX,IAAI,CAACvB,cAAc,GAAG,+BAA+B;QACrD,IAAI,CAACC,YAAY,GAAG,IAAI;QACxB,IAAI,CAACC,YAAY,CAACsB,KAAK,EAAE,CAAC,CAAC;MAC7B,CAAC,EACAC,KAAK,IAAI;QACR,IAAI,CAACzB,cAAc,GAAG,IAAI;QAC1B,IAAI,CAACC,YAAY,GAAG,iCAAiC,GAAGwB,KAAK,CAACC,OAAO;MACvE,CAAC,CACF;KACF,MAAM;MACL,IAAI,CAACzB,YAAY,GAAG,kDAAkD;;EAE1E;CACD;AA7CYL,iBAAiB,GAAA+B,UAAA,EAL7BjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACWlC,iBAAiB,CA6C7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}